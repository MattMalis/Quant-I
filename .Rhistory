library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_se', 'z_reg_se', 'se_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(summary(lm(y~x+z))$coef)
## storing coef and se values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_se = (summary(lm(y~x+z))$coef[5])^2
z_reg_se = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and se matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
se_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_se = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and se values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_se, z_reg_se, se_mat)[[j]]}
}
vals
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_se', 'z_reg_se', 'se_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(summary(lm(y~x+z))$coef)
## storing coef and se values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_se = (summary(lm(y~x+z))$coef[5])
z_reg_se = (summary(lm(y~x+z))$coef[6])
# calculating coef and se matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
se_mat = ((solve(t(X)%*%X)*(ssr/97)))^(0.5)
#z_mat_se = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and se values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_se, z_reg_se, se_mat)[[j]]}
}
vals
ssr
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_se', 'z_reg_se', 'se_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(summary(lm(y~x+z))$coef)
## storing coef and se values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_se = (summary(lm(y~x+z))$coef[5])^2
z_reg_se = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and se matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
se_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_se = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and se values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_se, z_reg_se, se_mat)[[j]]}
}
vals
ssr/9
ssr/97
solve(t(X)%*%X)
solve(t(X)%*%X)%*%(t(X)%*%X)
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_se', 'z_reg_se', 'se_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(summary(lm(y~x+z))$coef)
## storing coef and se values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_se = (summary(lm(y~x+z))$coef[5])^2
z_reg_se = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and se matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
se_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_se = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and se values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_se, z_reg_se, se_mat)[[j]]}
}
vals
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_var', 'z_reg_var', 'var_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(summary(lm(y~x+z))$coef)
## storing coef and var values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_var = (summary(lm(y~x+z))$coef[5])^2
z_reg_var = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and var matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
var_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_var = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and var values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_var, z_reg_var, var_mat)[[j]]}
}
vals
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_var', 'z_reg_var', 'var_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(summary(lm(y~x+z))$coef)
## storing coef and var values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_var = (summary(lm(y~x+z))$coef[5])^2
z_reg_var = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and var matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
var_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_var = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and var values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_var, z_reg_var, var_mat)[[j]]}
}
vals
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_var', 'z_reg_var', 'var_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(paste('ssr:', ssr))
print(summary(lm(y~x+z))$coef)
## storing coef and var values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_var = (summary(lm(y~x+z))$coef[5])^2
z_reg_var = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and var matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
var_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_var = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and var values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_var, z_reg_var, var_mat)[[j]]}
}
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_var', 'z_reg_var', 'var_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(paste('ssr:', ssr))
print(summary(lm(y~x+z))$coef)
## storing coef and var values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_var = (summary(lm(y~x+z))$coef[5])^2
z_reg_var = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and var matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
var_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_var = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and var values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_var, z_reg_var, var_mat)[[j]]}
}
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_var', 'z_reg_var', 'var_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(paste('ssr:', ssr))
print(summary(lm(y~x+z))$coef)
## storing coef and var values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_var = (summary(lm(y~x+z))$coef[5])^2
z_reg_var = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and var matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
var_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_var = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and var values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_var, z_reg_var, var_mat)[[j]]}
}
library(mvtnorm)
## creating nested list to store values
## outer list corresponds to different covariance values; inner list to different coefficients
covs = c(.2, .5, .8, .9)
vals = vector('list', 4)
names(vals) = c('cov.2', 'cov.5', 'cov.8', 'cov.9')
for(i in  1:4){
vals[[i]] = vector('list', 6)
names(vals[[i]]) = c('x_reg_coef', 'z_reg_coef', 'coef_mat', 'x_reg_var', 'z_reg_var', 'var_mat')
}
## looping over covariance values
for(i in 1:4){
cov = covs[i]
print(paste("Covariance:",cov))
## creating covariance matrix and generating data
smat<-matrix(c(1,cov,cov,1),2)
data<-rmvnorm(100,sigma =smat)
x<-data[,1]
z<-data[,2]
ones = rep(1,100)
y<-2+x+z+rnorm(n=100)
#checking covariance between x and z
print(paste("x~z, coef: ", summary(lm(x~z))$coef[2]))
## storing residuals and sum of squared residuals
resids = summary(lm(y~x+z))$residuals
ssr = sum(resids^2)
print(paste('ssr:', ssr))
print(summary(lm(y~x+z))$coef)
## storing coef and var values from regression output
x_reg_coef = summary(lm(y~x+z))$coef[2]
z_reg_coef = summary(lm(y~x+z))$coef[3]
x_reg_var = (summary(lm(y~x+z))$coef[5])^2
z_reg_var = (summary(lm(y~x+z))$coef[6])^2
# calculating coef and var matrices manually
X = cbind(ones, x,z)
coef_mat = solve(t(X)%*%X)%*%(t(X)%*%(y))
#z_mat_coef = (solve(t(z)%*%z))*(t(z)%*%(y-(x*x_reg_coef)))
var_mat = (solve(t(X)%*%X)*(ssr/97))
#z_mat_var = ((solve(t(z)%*%z))*(ssr/97))^(0.5)
# storing all coef and var values in the vals list
for(j in 1:6){
vals[[i]][[j]] = list(x_reg_coef, z_reg_coef, coef_mat, x_reg_var, z_reg_var, var_mat)[[j]]}
}
